#!/usr/bin/env node

var crypto = require('crypto');
var restify = require('restify');
var request = require('request');
var program = require('commander');
var opn = require('opn');

// Setup

program
  .option('-c, --client_id <okta client id>', 'OIDC Client ID', '')
  .option('-o, --okta_org <okta org url>', 'ex: https://micah.oktapreview.com', '')
  .option('-s, --scopes <space separated list of scopes>', 'Space separated list of scopes', 'openid profile email')
  .option('-r, --redirect_uri <redirect uri>', 'redirect uri', 'http://localhost:8080/redirect')
  .option('-u, --user <username>', 'App User', '')
  .option('-p, --pass <password>', 'User password', '')
  .parse(process.argv);
  
if (
  !program.client_id || !program.okta_org || 
  !program.scopes || !program.redirect_uri
) {
  program.help();
  process.exit(1);
}  
  
const server = restify.createServer({
  name: 'myapp',
  version: '1.0.0'
});

server.use(restify.plugins.acceptParser(server.acceptable));
server.use(restify.plugins.queryParser());
server.use(restify.plugins.bodyParser());
server.listen(8080);

server.get('/redirect', oktaRedirectHandler);

// execute auth code flow with pkce
var codeVerifier = uuid();
console.log('Created Code Verifier (v): ' + codeVerifier + '\n');
var codeChallenge = base64url(
  crypto.createHash('sha256').update(codeVerifier).digest('base64')
);
console.log('Created Code Challenge ($): ' + codeChallenge + '\n');


// step 0.5 (Authn)
const formData = {
  "username": program.user,
  "password": program.pass,
  "options": {
    "multiOptionalFactorEnroll": true,
    "warnBeforePasswordExpired": true
  }  
}; 


request.post(
  {
    url: program.okta_org + '/api/v1/authn',
    headers: {
      "content-type": "application/json",
    },
    body: formData,
    json: true
  },
  function (err, httpResponse, body) {
    console.log('session: '+body.sessionToken);
    var authorizeUrl = buildAuthorizeUrl(codeVerifier, codeChallenge, body.sessionToken);

    request.get({
      url: authorizeUrl,
      function (err, httpResponse, body) {
        if (err) {
          console.log(err);
        }
      }
    });
  }
);


console.log('Running...');
keypress().then(() => {
});

// Step 2: Okta redirects back to this app with an auth code
async function oktaRedirectHandler(req, res, next) {
  console.log('\nGot code (α): ' + req.query.code + '\n');

  var form = {
    grant_type: 'authorization_code',
    redirect_uri: program.redirect_uri,
    client_id: program.client_id,
    code: req.query.code,
    code_verifier: codeVerifier
  };
  
  console.log('\nCalling /token endpoint with:');
  console.log('client_id: ' + form.client_id);
  console.log('code_verifier (v): ' + form.code_verifier);
  console.log('code (α): ' + form.code + '\n');
  
  console.log(
    'Here is the complete form post that will be sent to the /token endpoint:'
  );
  console.log(form);
  console.log();

  // Step 3: call token endpoint where Okta will exchange code for tokens
  request.post(
    { 
      url: program.okta_org + '/oauth2/v1/token', 
      form: form 
    },
    function (err, httpResponse, body) {
      var tokenResponse = JSON.parse(body);
      tokenResponseHandler(tokenResponse);
      return next();
    }
  );
}

async function tokenResponseHandler(tokenResponse) {
  console.log('\nGot token response:');
  console.log(tokenResponse);
  console.log();
  process.exit(0); 
}

function uuid() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
      .toString(16)
      .substring(1);
  }
  return s4() + '_' + s4() + '_' + s4() + '_' + s4() + '_' + 
    s4() + '_' + s4() + '_' + s4() + '_' + s4() + '_' + 
    s4() + '_' + s4() + '_' + s4()
}

function base64url(str){
    return str.replace(/\+/g, '-').replace(/\//g, '_').replace(/\=+$/, '');
}

function buildAuthorizeUrl(codeVerifier, codeChallenge, sessionToken) {
	var authorizeUrl = program.okta_org + '/oauth2/v1/authorize?' +
    'client_id=' + program.client_id + '&' +
    'response_type=code&' +
    'scope=' + program.scopes + '&' +
    'redirect_uri=' + program.redirect_uri + '&' +
    'state=' + uuid() + '&' +
    'code_challenge_method=S256&' + 
    'code_challenge=' + codeChallenge + '&' +
    'prompt=none&' +
    'sessionToken=' + sessionToken;
  return authorizeUrl;
}

async function keypress() {
  process.stdin.setRawMode(true)
  return new Promise(resolve => process.stdin.once('data', () => {
    process.stdin.setRawMode(false)
    resolve()
  }))
}
